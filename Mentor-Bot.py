import asyncio
import logging
import mysql
import datetime

from aiogram import Bot, types
from aiogram import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from mysql.connector import connect

logging.basicConfig(level=logging.INFO)

# mysql vars
db_config = {
    "user": "me",
    "password": "password",
    "host": "193.124.118.138",
    "database": "project",
}
db = mysql.connector.connect(**db_config)
cursor = db.cursor(buffered=True)

# aiogram vars
bot = Bot(token="5703403331:AAFFuggpCLrtk5qeOpwRjW-Xfeub_0Ic1gA")
dp = Dispatcher(bot)
admin_tg = 1202748393

# datetime
new_format = "%d-%m-%Y"

# flags
is_process_mentoring = False
is_process_meeting = False
last_id_mentor = 0
last_id_meeting = 0
in_mentors = False
in_users = False
is_answered = False
what_kind_of_answer = 4


# –∫–æ–º–∞–Ω–¥–∞ "/start"
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    telegram_id = message.from_id
    telegram_username = message.from_user.username

    cursor.execute(f"SELECT EXISTS(SELECT * FROM telegram_info WHERE telegram_id = '{telegram_id}' OR telegram_name = '{telegram_username}')")

    if cursor.fetchone()[0] == "0":
        cursor.execute(f"INSERT INTO telegram_info(telegram_id, telegram_name) VALUES('{telegram_id}', '{telegram_username}')")
        db.commit()

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–ò—â–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–æ–≤ –Ω–∞:https://www.dns-mentor.ru/\n–ò—Å–ø–æ–ª—å–∑—É–π: /profile –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ üë§")


# –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(commands=['profile'])
async def start(message: types.Message):
    username = message.from_user.username
    current_data = datetime.date.today()

    cursor.execute(f"SELECT telegram_name FROM telegram_info WHERE telegram_id={message.chat.id}")
    db.commit()
    tg_name = cursor.fetchone()
    tg_name = tg_name[0]

    # –Ω–∞—Ö–æ–¥–∏–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–µ–Ω—Ç–æ—Ä–∞—Ö
    in_mentors = False
    cursor.execute(f"SELECT mentor_telegram FROM mentors WHERE mentor_telegram = '@{tg_name}'")
    db.commit()
    if len(cursor.fetchone()) == 0:
        in_mentors = False
    else:
        in_mentors = True

    # –Ω–∞—Ö–æ–¥–∏–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    in_users = False
    cursor.execute(f"SELECT user_telegram FROM users WHERE user_telegram = '@{tg_name}'")
    db.commit()
    if len(cursor.fetchone()) == 0:
        in_users = False
    else:
        in_users = True

    # if message.chat.id == admin_tg:
    #     await message.answer(f"–í–∞—à üë§:\n\n"
    #                          f"üèÜ–í—ã –Ω–∞—à –∞–¥–º–∏–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—éüèÜ")
    if in_mentors:
        cursor.execute(f"SELECT * FROM mentors WHERE mentor_telegram='@{tg_name}'")
        db.commit()
        for _ in cursor.fetchall():
            (num, meeting, telegram, mail, surname, name, price, exp, saves, sphere, about) = _

            cursor.execute(f"SELECT * FROM meeting WHERE mentors_telegram='@{tg_name}'")
            db.commit()
            ok = cursor.fetchall()

            if len(ok) == 0:
                await message.answer(f"–í–∞—à üë§:\n\n–í—ã - –º–µ–Ω—Ç–æ—Äüôãüèª\n\n"
                                     f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {surname}\n‚Ä¢ –ò–º—è: {name}\n‚Ä¢ Telegram: {telegram}\n"
                                     f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏: {price} (‚ÇΩ)\n‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {exp} –≥–æ–¥–∞(–ª–µ—Ç)\n"
                                     f"‚Ä¢ –í–∞—à–∞ —Å—Ñ–µ—Ä–∞: {sphere}\n‚Ä¢ –û –≤–∞—Å: /about\n‚Ä¢ –í—ã –ø–æ–º–æ–≥–ª–∏ {saves} –ª—é–¥—è–º\n\n")
            else:
                i = 1
                for ok in ok:
                    date, Id, mentor_tg, user_tg, state = ok[0], ok[1], ok[2], ok[3], ok[4]
                    if i > 1:
                        await message.answer(
                            f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n {i}: üìÖ{(date.strftime(new_format)).replace('-', '.')} - {user_tg}. –û—Å—Ç–∞–ª–æ—Å—å: {(date - current_data).days} –¥–Ω–µ–π!")
                    else:
                        await message.answer(f"–í–∞—à üë§:\n\n–í—ã - –º–µ–Ω—Ç–æ—Äüôãüèª\n\n"
                                             f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {surname}\n‚Ä¢ –ò–º—è: {name}\n‚Ä¢ Telegram: {telegram}\n"
                                             f"üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏: {price} (‚ÇΩ)\nüåü –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {exp} –≥–æ–¥–∞(–ª–µ—Ç)\n"
                                             f"‚Ä¢ –í–∞—à–∞ —Å—Ñ–µ—Ä–∞: {sphere}\n‚Ä¢ –û –≤–∞—Å: /about\nü§ù –í—ã –ø–æ–º–æ–≥–ª–∏ {saves} –ª—é–¥—è–º\n\n"
                                             f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n {i}: üìÖ{(date.strftime(new_format)).replace('-', '.')} - {user_tg}. –û—Å—Ç–∞–ª–æ—Å—å: {(date - current_data).days} –¥–Ω–µ–π!")
                        i += 1

    if in_users:
        cursor.execute(f"SELECT * FROM users WHERE user_telegram='@{tg_name}'")
        for _ in cursor.fetchall():
            (num, meeting, surname, telegram, mail, name) = _

            cursor.execute(f"SELECT * FROM meeting WHERE mentors_telegram='@{tg_name}'")
            db.commit()
            ok = cursor.fetchall()

            if len(ok) == 0:
                await message.answer(f"–í–∞—à üë§:\n\n–í—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüôÜ\n\n"
                                     f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {surname}\n‚Ä¢ –ò–º—è: {name}\n‚Ä¢ Telegram: {telegram}\n\n")
            else:
                i = 1
                for ok in ok:
                    date, Id, mentor_tg, user_tg, state = ok[0], ok[1], ok[2], ok[3], ok[4]

                    if i > 1:
                        await message.answer(
                            f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n {i}: {(date.strftime(new_format)).replace('-', '.')} - {mentor_tg}. –û—Å—Ç–∞–ª–æ—Å—å: {(date - current_data).days} –¥–Ω–µ–π!")
                    else:
                        await message.answer(f"–í–∞—à üë§:\n\n–í—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüôÜ\n\n"
                                             f"‚Ä¢ –§–∞–º–∏–ª–∏—è: {surname}\n‚Ä¢ –ò–º—è: {name}\n‚Ä¢ Telegram: {telegram}\n\n"
                                             f"üìÖ–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n {i}: {(date.strftime(new_format)).replace('-', '.')} - {mentor_tg}. –û—Å—Ç–∞–ª–æ—Å—å: {(date - current_data).days} –¥–Ω–µ–π!")
                        i += 1


# –∫–æ–º–∞–Ω–¥–∞ "–û —Å–µ–±–µ"
@dp.message_handler(commands=['about'])
async def start(message: types.Message):
    username = message.from_user.username

    cursor.execute(f"SELECT * FROM mentors WHERE mentor_telegram='@{username}'")
    for db in cursor.fetchall():
        (num, meeting, telegram, mail, surname, name, price, exp, saves, sphere, about) = db
        about = about.replace("*", "\n")
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ:\n\n"
                             f"‚Ä¢ –û –í–∞—Å: {about}\n")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ
async def checking_applicatoins_for_mentoring():
    global is_process_mentoring
    global last_id_mentor

    while True:
        cursor.execute("SELECT * FROM applications_for_mentoring WHERE moderation=2")
        requests = cursor.fetchall()
        db.commit()
        await asyncio.sleep(5)
        if not is_process_mentoring:
            if len(requests) == 0:
                await asyncio.sleep(5)
                continue
            request = requests[0]
            last_id_mentor = request[0]
            about = request[8].replace("*", "\n")

            message = f"""–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ\n\n‚Ä¢ –§–∞–º–∏–ª–∏—è: {request[1]}\n‚Ä¢ –ò–º—è: {request[2]}\n‚Ä¢–¢–µ–ª–µ–≥—Ä–∞–º–º: {request[3]}\n‚Ä¢ –ü–æ—á—Ç–∞: {request[4]}\n‚Ä¢ –¶–µ–Ω–∞: {request[5]}\n‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {request[6]}\n‚Ä¢ –°—Ñ–µ—Ä—ã: {request[7]}\n‚Ä¢ –û —Å–µ–±–µ: {about}\n"""
            inline_keyboard = InlineKeyboardMarkup(row_width=2)
            accept = InlineKeyboardButton(text="‚úÖ Accept", callback_data="accept")
            decline = InlineKeyboardButton(text="‚õî Deny", callback_data="deny")
            inline_keyboard.add(accept, decline)

            await bot.send_message(chat_id=admin_tg, text=message, reply_markup=inline_keyboard)

            is_process_mentoring = True

        await asyncio.sleep(1)


# –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–∞
@dp.callback_query_handler(text="accept")
async def accept_the_mentor(callback: types.CallbackQuery):
    global is_process_mentoring
    global last_id_mentor

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    cursor.execute(f"SELECT telegram FROM applications_for_mentoring WHERE id = {last_id_mentor}")
    mentor_telegram_name = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{mentor_telegram_name}'")
    mentor_telegram_id = int(cursor.fetchone()[0])
    await asyncio.sleep(3)

    # –∑–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è —É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor.execute(f"UPDATE applications_for_mentoring SET moderation = 1 WHERE moderation = 2 AND id = {last_id_mentor}")
    db.commit()
    await asyncio.sleep(5)

    # –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –µ–µ –≤ —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω—Ç–æ—Ä–æ–≤
    cursor.execute(f"SELECT * FROM applications_for_mentoring WHERE id = {last_id_mentor}")

    accepted_request = cursor.fetchall()
    await asyncio.sleep(2)
    cursor.execute(
        f"INSERT INTO mentors(mentor_telegram, mentor_surname, mentor_name, price, experience, sphere, about) VALUES('{accepted_request[0][3]}', '{accepted_request[0][1]}', '{accepted_request[0][2]}', '{accepted_request[0][5]}', {accepted_request[0][6]}, '{accepted_request[0][7]}', '{accepted_request[0][8]}')")
    db.commit()
    await asyncio.sleep(3)

    cursor.execute(f"DELETE FROM applications_for_mentoring WHERE moderation = 1 AND id = {last_id_mentor}")
    db.commit()
    await asyncio.sleep(2)

    await bot.send_message(chat_id=mentor_telegram_id,
                           text="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.\n–í—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n ‚≠ê–ñ–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –≤—Å—Ç—Ä–µ—á –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤!‚≠ê\n\tP.S. –° —É–≤–∞–∂–µ–Ω–∏–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—èüë©üèª‚Äçüíª")

    is_process_mentoring = False


# –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞
@dp.callback_query_handler(text="deny")
async def deny_the_mentor(callback: types.CallbackQuery):
    global is_process_mentoring
    global last_id_mentor

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞!")

    cursor.execute(f"SELECT telegram FROM applications_for_mentoring WHERE id = {last_id_mentor}")
    mentor_telegram_name = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{mentor_telegram_name}'")
    mentor_telegram_id = int(cursor.fetchone()[0])
    await asyncio.sleep(2)

    cursor.execute(f"UPDATE applications_for_mentoring SET moderation = 0 WHERE id = {last_id_mentor} AND moderation = 2")
    db.commit()
    await asyncio.sleep(1)

    cursor.execute(f"DELETE FROM applications_for_mentoring WHERE moderation = 0 AND id = {last_id_mentor}")
    db.commit()
    await asyncio.sleep(3)

    await bot.send_message(chat_id=mentor_telegram_id, text="–ó–∞—è–≤–∫–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.\n üçÄ–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!üçÄ")

    is_process_mentoring = False


# –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
async def checking_applicatoins_for_meeting():
    global is_process_meeting
    global last_id_meeting

    while True:
        cursor.execute("SELECT * FROM applications_for_meeting")
        requests = cursor.fetchall()
        db.commit()
        await asyncio.sleep(1)

        if not is_process_meeting:
            if len(requests) == 0:
                await asyncio.sleep(1)
                continue
            for i in range(0, len(requests)):
                request = requests[i]
                last_id_meeting = request[6]
                meeting_date = request[4].strftime(new_format).replace("-", ".")

                message = f"""–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É\n\n‚Ä¢ –§–∞–º–∏–ª–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {request[0]}\n‚Ä¢ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {request[1]}\n‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–ª–∏–µ–Ω—Ç–∞: {request[3]}\n‚Ä¢ –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {meeting_date}"""
                inline_keyboard = InlineKeyboardMarkup(row_width=2)
                accept = InlineKeyboardButton(text="‚úÖ Agree", callback_data="agree")
                decline = InlineKeyboardButton(text="‚õî Refuse", callback_data="refuse")
                inline_keyboard.add(accept, decline)

                cursor.execute(f"SELECT mentor_telegram FROM applications_for_meeting WHERE id = {last_id_meeting}")
                mentor_telegram_name = cursor.fetchone()[0][1:]
                cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{mentor_telegram_name}'")
                mentor_telegram_id = int(cursor.fetchone()[0])

                await bot.send_message(chat_id=mentor_telegram_id, text=message, reply_markup=inline_keyboard)

                is_process_meeting = True

        await asyncio.sleep(1)


# –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏–Ω—è—Ç–∞
@dp.callback_query_handler(text="agree")
async def agree_for_meeting(callback: types.CallbackQuery):
    global is_process_meeting
    global last_id_meeting

    await callback.answer("–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!")

    # –≤—ã–±–æ—Ä id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –º–µ–Ω—Ç–æ—Ä–∞
    cursor.execute(f"SELECT mentor_telegram FROM applications_for_meeting WHERE id = {last_id_meeting}")
    mentor_telegram_name = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{mentor_telegram_name}'")
    mentor_telegram_id = int(cursor.fetchone()[0])

    # –≤—ã–±–æ—Ä id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(f"SELECT user_telegram FROM applications_for_meeting WHERE id = {last_id_meeting}")
    user_telegram_name = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{user_telegram_name}'")
    user_telegram_id = int(cursor.fetchone()[0])

    # –∑–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è —É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor.execute(f"UPDATE applications_for_meeting SET confirmation = 1 WHERE confirmation = 2 AND id = {last_id_meeting}")
    db.commit()

    # –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –µ–µ –≤ —Ç–∞–±–ª–∏—Ü—É –º–µ–Ω—Ç–æ—Ä–æ–≤
    cursor.execute(f"SELECT * FROM applications_for_meeting WHERE id = {last_id_meeting}")

    accepted_request = cursor.fetchall()
    cursor.execute(
        f"INSERT INTO meeting(confirm_date, mentors_telegram, user_telegram) VALUES('{accepted_request[0][4]}', '{accepted_request[0][2]}', '{accepted_request[0][3]}')")
    db.commit()

    cursor.execute(f"DELETE FROM applications_for_meeting WHERE confirmation = 1 AND id = {last_id_meeting}")
    db.commit()

    await bot.send_message(chat_id=mentor_telegram_id, text="<–¢–ï–ö–°–¢ –î–õ–Ø –ú–ï–ù–¢–û–†–ê –ü–†–ò –ü–†–ò–ù–Ø–¢–ò–ò –ó–ê–Ø–í–ö–ò>")
    await bot.send_message(chat_id=user_telegram_id, text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\nTelegram –º–µ–Ω—Ç–æ—Ä–∞: @{mentor_telegram_name}\n–£–¥–∞—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏!")

    is_process_meeting = False


# –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞
@dp.callback_query_handler(text="refuse")
async def refuse_for_meeting(callback: types.CallbackQuery):
    global is_process_meeting
    global last_id_meeting

    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—Å—Ç—Ä–µ—á–∏!")

    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—è–≤–∫–∏
    cursor.execute(f"UPDATE applications_for_meeting SET confirmation = 0 WHERE id = {last_id_meeting}")
    db.commit()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ id —á–∞—Ç–∞ —Å –º–µ–Ω—Ç–æ—Ä–æ–º
    cursor.execute(f"SELECT mentor_telegram FROM applications_for_meeting WHERE id = {last_id_meeting} AND confirmation = 0")
    db.commit()
    mentor_username = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{mentor_username}'")
    db.commit()
    mentor_id = int(cursor.fetchone()[0])

    # –ø–æ–ª—É—á–µ–Ω–∏–µ id —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute(f"SELECT user_telegram FROM applications_for_meeting WHERE id = {last_id_meeting} AND confirmation = 0")
    db.commit()
    user_username = cursor.fetchone()[0][1:]
    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{user_username}'")
    db.commit()
    user_id = int(cursor.fetchone()[0])

    cursor.execute(f"DELETE FROM applications_for_meeting WHERE confirmation = 0 AND id = {last_id_meeting}")
    db.commit()

    await bot.send_message(chat_id=mentor_id, text="–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤üíö")
    await bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å!\n–í–∞—à–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ —Ä–∞–¥—É–µ—Ç, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å!!!")

    is_process_meeting = False


@dp.callback_query_handler(text="+1")
async def plus_1_to_mentor(callback: types.CallbackQuery):
    global is_answered
    global what_kind_of_answer

    is_answered = True
    what_kind_of_answer = 1

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!")


@dp.callback_query_handler(text="+0.5")
async def plus_0_5_to_mentor(callback: types.CallbackQuery):
    global is_answered
    global what_kind_of_answer

    is_answered = True
    what_kind_of_answer = 2

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!")


@dp.callback_query_handler(text="+0")
async def plus_0_to_mentor(callback: types.CallbackQuery):
    global is_answered
    global what_kind_of_answer

    is_answered = True
    what_kind_of_answer = 0

    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!")


# —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminder():
    global is_answered
    global what_kind_of_answer

    while True:
        current_date = datetime.datetime.now()

        # db.commit()
        cursor.execute("SELECT id FROM meeting")
        db.commit()
        id_list = cursor.fetchall()
        await asyncio.sleep(1)

        if len(id_list) == 0:
            continue
        else:
            for meeting in id_list:
                cursor.execute(f"SELECT confirm_date FROM meeting WHERE id = {meeting[0]}")
                db.commit()
                meeting_date = cursor.fetchone()[0]
                await asyncio.sleep(1)

                difference = meeting_date - current_date.date()

                cursor.execute(f"SELECT statement FROM meeting WHERE id = {meeting[0]}")
                db.commit()
                state = cursor.fetchone()[0]
                await asyncio.sleep(1)

                # –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞, –∫–æ–≥–¥–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –º–µ–Ω–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 3 –¥–Ω—è –∏ –ø–æ—Ç–æ–º —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤
                # if difference <= datetime.timedelta(days=3) and (state != "1") and current_date.hour % 12 == 0 and current_date.minute == 0 and current_date.second == 0:
                if difference <= datetime.timedelta(days=3) and (state != "1") and current_date.hour % (12 or 13 or 14 or 15) == 0 and current_date.minute % 15 == 0 and current_date.second == 0:
                    cursor.execute(f"SELECT mentors_telegram FROM meeting WHERE id = '{meeting[0]}'")
                    check_mentor = cursor.fetchall()[0][0][1:]
                    db.commit()
                    await asyncio.sleep(1)

                    cursor.execute(f"SELECT user_telegram FROM meeting WHERE id = '{meeting[0]}'")
                    check_user = cursor.fetchall()[0][0][1:]
                    db.commit()
                    await asyncio.sleep(1)

                    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{check_mentor}'")
                    mentor_tg = cursor.fetchone()[0]
                    db.commit()
                    await asyncio.sleep(1)

                    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{check_user}'")
                    user_tg = cursor.fetchone()[0]
                    db.commit()
                    await asyncio.sleep(1)

                    await bot.send_message(chat_id=int(mentor_tg), text="Mentor")
                    await bot.send_message(chat_id=int(user_tg), text="User")

                # —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–∫–∏, –∫–æ–≥–¥–∞ —É–∂–µ –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—á–∏
                if current_date == meeting_date:
                    cursor.execute(f"UPDATE meeting SET statement = 1 WHERE id = {meeting[0]}")
                    db.commit()
                    await asyncio.sleep(1)

                # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ + 1 –¥–µ–Ω—å –∏ 12 —á–∞—Å–æ–≤, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏
                cursor.execute(f"SELECT statement FROM meeting WHERE id = {meeting[0]}")
                db.commit()
                state = cursor.fetchone()[0]
                await asyncio.sleep(1)
                # if True:
                if current_date.date() == meeting_date + datetime.timedelta(days=1, hours=12) and state == 1 and current_date.hour % 12 == 0 and current_date.minute == 0 and current_date.second == 0:
                    cursor.execute(f"SELECT user_telegram FROM meeting WHERE id = '{meeting[0]}'")
                    check_user = cursor.fetchall()[0][0][1:]
                    db.commit()
                    await asyncio.sleep(1)

                    cursor.execute(f"SELECT telegram_id FROM telegram_info WHERE telegram_name = '{check_user}'")
                    user_tg = cursor.fetchone()[0]
                    db.commit()
                    await asyncio.sleep(1)

                    inline_keyboard = InlineKeyboardMarkup(row_width=1)
                    good = InlineKeyboardButton(text="‚úÖ –î–∞, –≤—ã–¥–∞–ª–∞—Å—å –ø–æ–ª–µ–∑–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", callback_data="+1")
                    normal = InlineKeyboardButton(text="‚ö† –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ –ø—Ä—è–º –ø–æ–ª–µ–∑–Ω–∞—è...", callback_data="+0.5")
                    bad = InlineKeyboardButton(text="‚õî –í—Å—Ç—Ä–µ—á–∞ —É–∂–∞—Å–Ω–∞—è, –≤—Å–µ –ø–ª–æ—Ö–æ", callback_data="+0")
                    inline_keyboard.add(good, normal, bad)

                    await bot.send_message(chat_id=int(user_tg), text="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –º–µ–Ω—Ç–æ—Ä–æ–º?)",
                                           reply_markup=inline_keyboard)

                    # await asyncio.sleep(43_200)

                # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ + 2 –¥–Ω—è –∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –º–µ–Ω—Ç–æ—Ä—É + 0.5
                # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç "+", —Ç–æ + 1 –∫ –º–µ–Ω—Ç–æ—Ä—É
                # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç "-", —Ç–æ + 0 –∫ –º–µ–Ω—Ç–æ—Ä—É
                if state == 0:
                    if current_date.date() > meeting_date + datetime.timedelta(days=2) and is_answered and what_kind_of_answer == 1:
                        cursor.execute(f"SELECT mentors_telegram FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        tg_mentor = cursor.fetchone()[0]
                        await asyncio.sleep(1)

                        cursor.execute(f"DELETE FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        await asyncio.sleep(1)

                        cursor.execute(f"UPDATE mentors SET number_of_rescued=number_of_rescued+1 WHERE mentor_telegram = '{tg_mentor}'")
                        db.commit()
                        await asyncio.sleep(1)

                    if current_date.date() > meeting_date + datetime.timedelta(days=2) and is_answered and what_kind_of_answer == 0:
                        cursor.execute(f"SELECT mentors_telegram FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        tg_mentor = cursor.fetchone()[0]
                        await asyncio.sleep(1)

                        cursor.execute(f"DELETE FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        await asyncio.sleep(1)

                        cursor.execute(f"UPDATE mentors SET number_of_rescued=number_of_rescued+0 WHERE mentor_telegram = '{tg_mentor}'")
                        db.commit()
                        await asyncio.sleep(1)

                    if current_date.date() > meeting_date + datetime.timedelta(days=2) and is_answered and what_kind_of_answer == 2:
                        cursor.execute(f"SELECT mentors_telegram FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        tg_mentor = cursor.fetchone()[0]
                        await asyncio.sleep(1)

                        cursor.execute(f"DELETE FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        await asyncio.sleep(1)

                        cursor.execute(f"UPDATE mentors SET number_of_rescued=number_of_rescued+0.5 WHERE mentor_telegram = '{tg_mentor}'")
                        db.commit()
                        await asyncio.sleep(1)

                    if current_date.date() > meeting_date + datetime.timedelta(days=3) and (not is_answered):
                        cursor.execute(f"SELECT mentors_telegram FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        tg_mentor = cursor.fetchone()[0]
                        await asyncio.sleep(1)

                        cursor.execute(f"DELETE FROM meeting WHERE id = {meeting[0]}")
                        db.commit()
                        await asyncio.sleep(1)

                        cursor.execute(f"UPDATE mentors SET number_of_rescued=number_of_rescued+0.5 WHERE mentor_telegram = '{tg_mentor}'")
                        db.commit()
                        await asyncio.sleep(1)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ª—é–¥–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Username - ID —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
async def delete_extra():
    global in_mentors
    global in_users

    while True:
        cursor.execute("SELECT telegram_name FROM telegram_info")
        cursor.fetchall()
        db.commit()

        for username in cursor:
            cursor.execute(f"SELECT EXISTS(SELECT * FROM mentors WHERE mentor_telegram = '@{username}'")
            db.commit()
            if cursor.fetchone()[0] == "1":
                in_mentors = True

            cursor.execute(f"SELECT EXISTS(SELECT * FROM users WHERE user_telegram = '@{username}'")
            db.commit()
            if cursor.fetchone()[0] == "1":
                in_mentors = True

            if in_mentors and in_users is False:
                cursor.execute(f"DELETE FROM telegram_info WHERE telegram_name = '{username}'")
                db.commit()

        await asyncio.sleep(604_800)


async def main():
    loop = asyncio.get_event_loop()

    loop.create_task(checking_applicatoins_for_mentoring())
    loop.create_task(checking_applicatoins_for_meeting())
    loop.create_task(reminder())
    loop.create_task(delete_extra())

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
